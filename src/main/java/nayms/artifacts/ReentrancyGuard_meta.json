{"compiler":{"version":"0.8.17+commit.8df45f5f"},"language":"Solidity","output":{"abi":[],"devdoc":{"details":"Contract module that helps prevent reentrant calls to a function. Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier available, which can be applied to functions to make sure there are no nested (reentrant) calls to them. Note that because there is a single `nonReentrant` guard, functions marked as `nonReentrant` may not call one another. This can be worked around by making those functions `private`, and then adding `external` `nonReentrant` entry points to them. TIP: If you would like to learn more about reentrancy and alternative ways to protect against it, check out our blog post https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].","kind":"dev","methods":{},"version":1},"userdoc":{"kind":"user","methods":{},"version":1}},"settings":{"compilationTarget":{"src/utils/ReentrancyGuard.sol":"ReentrancyGuard"},"evmVersion":"london","libraries":{},"metadata":{"bytecodeHash":"ipfs"},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"src/diamonds/nayms/AppStorage.sol":{"keccak256":"0x5943ae80e38ef64a5d25dcde3fea47eaa3379313145280332a495840e1b5dd20","license":"MIT","urls":["bzz-raw://aae67a13c6929d8def0ee90670041ebc6f190c22c8a709a5f238ff79fd33ef3f","dweb:/ipfs/QmfUaHo12BNj3U9spHAK31QqBFUTRifKS1rJbVdWhFVx4d"]},"src/diamonds/nayms/interfaces/FreeStructs.sol":{"keccak256":"0xa581c3557a40441e49ee21a9cec83622785e9ae70457e3e946660b96884a2260","license":"MIT","urls":["bzz-raw://27c0f2ac1f2a37e653caf1a78d7e15ecb0aa9be191ab8b5544f9f321fdf76973","dweb:/ipfs/QmYCw4JjEhjbFaJ5mCYMntM7B1G7crDxbwaewfhbuGu8Ei"]},"src/utils/ReentrancyGuard.sol":{"keccak256":"0xa5e9cf016e387adab639172486c0d249d1a8a8a67d4f36254b81229d9b3f9e98","license":"MIT","urls":["bzz-raw://b295db277d2b2723281cbee4795c1fcba805b75153af2419e68d1ded02dd0c8d","dweb:/ipfs/QmVt7i8hzWMbXmMiVwDp8ps9i6Bz1uHtrMHadEBoMnCYjy"]}},"version":1}