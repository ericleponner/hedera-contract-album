{"compiler":{"version":"0.8.17+commit.8df45f5f"},"language":"Solidity","output":{"abi":[{"inputs":[{"internalType":"bytes32","name":"_entityId","type":"bytes32"},{"internalType":"bytes32","name":"_tokenId","type":"bytes32"}],"name":"getLockedBalance","outputs":[{"internalType":"uint256","name":"amount","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"_entityId","type":"bytes32"},{"internalType":"bytes32","name":"_tokenId","type":"bytes32"},{"internalType":"bytes32","name":"_dividendTokenId","type":"bytes32"}],"name":"getWithdrawableDividend","outputs":[{"internalType":"uint256","name":"_entityPayout","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"accountId","type":"bytes32"},{"internalType":"bytes32","name":"tokenId","type":"bytes32"}],"name":"internalBalanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"from","type":"bytes32"},{"internalType":"bytes32","name":"tokenId","type":"bytes32"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"internalBurn","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"tokenId","type":"bytes32"}],"name":"internalTokenSupply","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"to","type":"bytes32"},{"internalType":"bytes32","name":"tokenId","type":"bytes32"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"internalTransferFromEntity","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"guid","type":"bytes32"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"payDividendFromEntity","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"ownerId","type":"bytes32"},{"internalType":"bytes32","name":"tokenId","type":"bytes32"}],"name":"withdrawAllDividends","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"ownerId","type":"bytes32"},{"internalType":"bytes32","name":"tokenId","type":"bytes32"},{"internalType":"bytes32","name":"dividendTokenId","type":"bytes32"}],"name":"withdrawDividend","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"from","type":"bytes32"},{"internalType":"bytes32","name":"to","type":"bytes32"},{"internalType":"bytes32","name":"tokenId","type":"bytes32"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"wrapperInternalTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"kind":"dev","methods":{"getLockedBalance(bytes32,bytes32)":{"params":{"_entityId":"Unique platform ID of the entity.","_tokenId":"The ID assigned to an external token."},"returns":{"amount":"of tokens that the entity has for sale in the marketplace."}},"getWithdrawableDividend(bytes32,bytes32,bytes32)":{"details":"Divident available for an entity to withdraw","params":{"_dividendTokenId":"Unique ID of dividend token","_entityId":"Unique ID of the entity","_tokenId":"Unique ID of token"},"returns":{"_entityPayout":"accumulated dividend"}},"internalBalanceOf(bytes32,bytes32)":{"details":"Internal balance for given account","params":{"tokenId":"Internal ID of the asset"},"returns":{"_0":"current balance"}},"internalTokenSupply(bytes32)":{"details":"Total supply of platform asset","params":{"tokenId":"Internal ID of the asset"},"returns":{"_0":"current balance"}},"internalTransferFromEntity(bytes32,bytes32,uint256)":{"details":"Transfer tokens internally","params":{"to":"token receiver","tokenId":"Internal ID of the token"}},"payDividendFromEntity(bytes32,uint256)":{"details":"Transfer dividends to the entity","params":{"amount":"the mamount of the dividend token to be distributed to NAYMS token holders.","guid":"Globally unique identifier of a dividend distribution."}},"withdrawAllDividends(bytes32,bytes32)":{"details":"Dividends can be available in more than one dividend denomination. This method will withdraw all available dividends in the different dividend denominations.","params":{"ownerId":"Unique ID of the dividend receiver","tokenId":"Unique ID of token"}},"withdrawDividend(bytes32,bytes32,bytes32)":{"details":"Transfer dividends to the entity","params":{"dividendTokenId":"Unique ID of dividend token","ownerId":"Unique ID of the dividend receiver","tokenId":"Unique ID of token"}},"wrapperInternalTransferFrom(bytes32,bytes32,bytes32,uint256)":{"details":"Transfer tokens internally between two IDs","params":{"from":"token sender","to":"token receiver","tokenId":"Internal ID of the token"}}},"version":1},"userdoc":{"kind":"user","methods":{"getLockedBalance(bytes32,bytes32)":{"notice":"Get the amount of tokens that an entity has for sale in the marketplace."},"getWithdrawableDividend(bytes32,bytes32,bytes32)":{"notice":"Get withdrawable dividend amount"},"internalBalanceOf(bytes32,bytes32)":{"notice":"Gets balance of an account within platform"},"internalTokenSupply(bytes32)":{"notice":"Current supply for the asset"},"internalTransferFromEntity(bytes32,bytes32,uint256)":{"notice":"Internal transfer of `amount` tokens"},"payDividendFromEntity(bytes32,uint256)":{"notice":"Pay `amount` of dividends"},"withdrawAllDividends(bytes32,bytes32)":{"notice":"Withdraws a user's available dividends."},"withdrawDividend(bytes32,bytes32,bytes32)":{"notice":"Withdraw available dividend"},"wrapperInternalTransferFrom(bytes32,bytes32,bytes32,uint256)":{"notice":"Internal transfer of `amount` tokens `from` -> `to`"}},"version":1}},"settings":{"compilationTarget":{"src/diamonds/nayms/interfaces/ITokenizedVaultFacet.sol":"ITokenizedVaultFacet"},"evmVersion":"london","libraries":{},"metadata":{"bytecodeHash":"ipfs"},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"src/diamonds/nayms/interfaces/ITokenizedVaultFacet.sol":{"keccak256":"0x02a9fc017690a2fd1424a67f2ecae15cd741fc381e3c755d141ca5dbfb78f368","license":"MIT","urls":["bzz-raw://2e654d4947bfddda09340711ac961871527ba9587d300100036604b97d9668e7","dweb:/ipfs/QmUg32HGvV17CHwu2tThPpVrojQwhuXEnfFe2WFwvqkqzF"]}},"version":1}