{"compiler":{"version":"0.8.17+commit.8df45f5f"},"language":"Solidity","output":{"abi":[{"inputs":[{"internalType":"uint256","name":"buyAmount","type":"uint256"}],"name":"calculateTradingCommissions","outputs":[{"components":[{"internalType":"uint256","name":"roughCommissionPaid","type":"uint256"},{"internalType":"uint256","name":"commissionNaymsLtd","type":"uint256"},{"internalType":"uint256","name":"commissionNDF","type":"uint256"},{"internalType":"uint256","name":"commissionSTM","type":"uint256"},{"internalType":"uint256","name":"commissionMaker","type":"uint256"},{"internalType":"uint256","name":"totalCommissions","type":"uint256"}],"internalType":"struct TradingCommissions","name":"tc","type":"tuple"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"_offerId","type":"uint256"}],"name":"cancelOffer","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"_sellToken","type":"bytes32"},{"internalType":"uint256","name":"_sellAmount","type":"uint256"},{"internalType":"bytes32","name":"_buyToken","type":"bytes32"},{"internalType":"uint256","name":"_buyAmount","type":"uint256"}],"name":"executeLimitOffer","outputs":[{"internalType":"uint256","name":"offerId_","type":"uint256"},{"internalType":"uint256","name":"buyTokenCommissionsPaid_","type":"uint256"},{"internalType":"uint256","name":"sellTokenCommissionsPaid_","type":"uint256"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"_sellToken","type":"bytes32"},{"internalType":"bytes32","name":"_buyToken","type":"bytes32"}],"name":"getBestOfferId","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getLastOfferId","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"_offerId","type":"uint256"}],"name":"getOffer","outputs":[{"components":[{"internalType":"bytes32","name":"creator","type":"bytes32"},{"internalType":"bytes32","name":"sellToken","type":"bytes32"},{"internalType":"uint256","name":"sellAmount","type":"uint256"},{"internalType":"uint256","name":"sellAmountInitial","type":"uint256"},{"internalType":"bytes32","name":"buyToken","type":"bytes32"},{"internalType":"uint256","name":"buyAmount","type":"uint256"},{"internalType":"uint256","name":"buyAmountInitial","type":"uint256"},{"internalType":"uint256","name":"feeSchedule","type":"uint256"},{"internalType":"uint256","name":"state","type":"uint256"},{"internalType":"uint256","name":"rankNext","type":"uint256"},{"internalType":"uint256","name":"rankPrev","type":"uint256"}],"internalType":"struct MarketInfo","name":"_offerState","type":"tuple"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getTradingCommissionsBasisPoints","outputs":[{"components":[{"internalType":"uint16","name":"tradingCommissionTotalBP","type":"uint16"},{"internalType":"uint16","name":"tradingCommissionNaymsLtdBP","type":"uint16"},{"internalType":"uint16","name":"tradingCommissionNDFBP","type":"uint16"},{"internalType":"uint16","name":"tradingCommissionSTMBP","type":"uint16"},{"internalType":"uint16","name":"tradingCommissionMakerBP","type":"uint16"}],"internalType":"struct TradingCommissionsBasisPoints","name":"bp","type":"tuple"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"_offerId","type":"uint256"}],"name":"isActiveOffer","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"}],"devdoc":{"details":"This should only be called through an entity, never directly by an EOA","kind":"dev","methods":{"calculateTradingCommissions(uint256)":{"details":"Calculate the trading commissions based on a buy amount.","params":{"buyAmount":"The amount that the commissions payments are calculated from."},"returns":{"tc":"TradingCommissions struct with metadata regarding the trade commission payment amounts."}},"cancelOffer(uint256)":{"details":"This function can be frontrun: In the scenario where a user wants to cancel an unfavorable market offer, an attacker can potentially monitor and identify       that the user has called this method, determine that filling this market offer is profitable, and as a result call executeLimitOffer with a higher gas price to have       their transaction filled before the user can have cancelOffer filled. The most ideal situation for the user is to not have placed the unfavorable market offer       in the first place since an attacker can always monitor our marketplace and potentially identify profitable market offers. Our UI will aide users in not placing       market offers that are obviously unfavorable to the user and/or seem like mistake orders. In the event that a user needs to cancel an offer, it is recommended to       use Flashbots in order to privately send your transaction so an attack cannot be triggered from monitoring the mempool for calls to cancelOffer. A user is recommended       to change their RPC endpoint to point to https://rpc.flashbots.net when calling cancelOffer. We will add additional documentation to aide our users in this process.       More information on using Flashbots: https://docs.flashbots.net/flashbots-protect/rpc/quick-start/","params":{"_offerId":"offer ID"}},"executeLimitOffer(bytes32,uint256,bytes32,uint256)":{"params":{"_buyAmount":"Amount to buy.","_buyToken":"Token to buy.","_sellAmount":"Amount to sell.","_sellToken":"Token to sell."},"returns":{"buyTokenCommissionsPaid_":"The amount of the buy token paid as commissions on this particular order.","offerId_":"returns >0 if a limit offer was created on the market because the offer couldn't be totally fulfilled immediately. In this case the return value is the created offer's id.","sellTokenCommissionsPaid_":"The amount of the sell token paid as commissions on this particular order."}},"getBestOfferId(bytes32,bytes32)":{"details":"This means finding the highest sellToken-per-buyToken price, i.e. price = sellToken / buyToken","returns":{"_0":"offerId, or 0 if no current best is available."}},"getLastOfferId()":{"details":"Get last created offer.","returns":{"_0":"offer id."}},"getOffer(uint256)":{"details":"Get the details of the offer #`_offerId`","params":{"_offerId":"ID of a particular offer"},"returns":{"_offerState":"details of the offer"}},"getTradingCommissionsBasisPoints()":{"returns":{"bp":"- TradingCommissionsBasisPoints struct containing the individual basis points set for each marketplace commission receiver."}},"isActiveOffer(uint256)":{"details":"Check if the offer #`_offerId` is active or not.","params":{"_offerId":"ID of a particular offer"},"returns":{"_0":"active or not"}}},"title":"Matching Market (inspired by MakerOTC: https://github.com/nayms/maker-otc/blob/master/contracts/matching_market.sol)","version":1},"userdoc":{"kind":"user","methods":{"cancelOffer(uint256)":{"notice":"Cancel offer #`_offerId`. This will cancel the offer so that it's no longer active."},"executeLimitOffer(bytes32,uint256,bytes32,uint256)":{"notice":"Execute a limit offer."},"getBestOfferId(bytes32,bytes32)":{"notice":"Get current best offer for given token pair."},"getTradingCommissionsBasisPoints()":{"notice":"Get the marketplace's trading commissions basis points."}},"notice":"Trade entity tokens","version":1}},"settings":{"compilationTarget":{"src/diamonds/nayms/interfaces/IMarketFacet.sol":"IMarketFacet"},"evmVersion":"london","libraries":{},"metadata":{"bytecodeHash":"ipfs"},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"src/diamonds/nayms/interfaces/FreeStructs.sol":{"keccak256":"0xa581c3557a40441e49ee21a9cec83622785e9ae70457e3e946660b96884a2260","license":"MIT","urls":["bzz-raw://27c0f2ac1f2a37e653caf1a78d7e15ecb0aa9be191ab8b5544f9f321fdf76973","dweb:/ipfs/QmYCw4JjEhjbFaJ5mCYMntM7B1G7crDxbwaewfhbuGu8Ei"]},"src/diamonds/nayms/interfaces/IMarketFacet.sol":{"keccak256":"0xf5bd6475cc57cf8e6b1b4517cfd3e1ccdeea590ba398a0a828c9a02bfd7ce047","license":"MIT","urls":["bzz-raw://d5beace8be7754de703ded6d95f04a6d75a291d993a0afa7a6f3addebb8769f2","dweb:/ipfs/QmULQVQQQro6YxQE6SF6TKS2G3BhXuzyJKyGXZrKR3LXNH"]}},"version":1}