{"compiler":{"version":"0.8.17+commit.8df45f5f"},"language":"Solidity","output":{"abi":[{"inputs":[{"internalType":"bytes32","name":"_policyId","type":"bytes32"},{"internalType":"bytes32","name":"_entityId","type":"bytes32"},{"components":[{"internalType":"bytes32[]","name":"roles","type":"bytes32[]"},{"internalType":"bytes32[]","name":"entityIds","type":"bytes32[]"},{"internalType":"bytes[]","name":"signatures","type":"bytes[]"}],"internalType":"struct Stakeholders","name":"_stakeholders","type":"tuple"},{"components":[{"internalType":"uint256","name":"startDate","type":"uint256"},{"internalType":"uint256","name":"maturationDate","type":"uint256"},{"internalType":"bytes32","name":"asset","type":"bytes32"},{"internalType":"uint256","name":"limit","type":"uint256"},{"internalType":"bool","name":"fundsLocked","type":"bool"},{"internalType":"bool","name":"cancelled","type":"bool"},{"internalType":"uint256","name":"claimsPaid","type":"uint256"},{"internalType":"uint256","name":"premiumsPaid","type":"uint256"},{"internalType":"bytes32[]","name":"commissionReceivers","type":"bytes32[]"},{"internalType":"uint256[]","name":"commissionBasisPoints","type":"uint256[]"}],"internalType":"struct SimplePolicy","name":"_simplePolicy","type":"tuple"},{"internalType":"bytes32","name":"_dataHash","type":"bytes32"}],"name":"createSimplePolicy","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"domainSeparatorV4","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"_entityId","type":"bytes32"},{"internalType":"string","name":"_symbol","type":"string"},{"internalType":"string","name":"_name","type":"string"}],"name":"enableEntityTokenization","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"_entityId","type":"bytes32"}],"name":"getEntityInfo","outputs":[{"components":[{"internalType":"bytes32","name":"assetId","type":"bytes32"},{"internalType":"uint256","name":"collateralRatio","type":"uint256"},{"internalType":"uint256","name":"maxCapacity","type":"uint256"},{"internalType":"uint256","name":"utilizedCapacity","type":"uint256"},{"internalType":"bool","name":"simplePolicyEnabled","type":"bool"}],"internalType":"struct Entity","name":"","type":"tuple"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"structHash","type":"bytes32"}],"name":"hashTypedDataV4","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"_entityId","type":"bytes32"}],"name":"isTokenWrapped","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"_entityId","type":"bytes32"},{"internalType":"uint256","name":"_amount","type":"uint256"},{"internalType":"uint256","name":"_totalPrice","type":"uint256"}],"name":"startTokenSale","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"_entityId","type":"bytes32"},{"components":[{"internalType":"bytes32","name":"assetId","type":"bytes32"},{"internalType":"uint256","name":"collateralRatio","type":"uint256"},{"internalType":"uint256","name":"maxCapacity","type":"uint256"},{"internalType":"uint256","name":"utilizedCapacity","type":"uint256"},{"internalType":"bool","name":"simplePolicyEnabled","type":"bool"}],"internalType":"struct Entity","name":"_entity","type":"tuple"}],"name":"updateEntity","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"Mainly used for token sale and policies","kind":"dev","methods":{"createSimplePolicy(bytes32,bytes32,(bytes32[],bytes32[],bytes[]),(uint256,uint256,bytes32,uint256,bool,bool,uint256,uint256,bytes32[],uint256[]),bytes32)":{"params":{"_dataHash":"hash of the offchain data","_entityId":"id of the entity","_policyId":"id of the policy","_simplePolicy":"policy to create","_stakeholders":"Struct of roles, entity IDs and signatures for the policy"}},"domainSeparatorV4()":{"details":"Returns the domain separator for the current chain."},"enableEntityTokenization(bytes32,string,string)":{"params":{"_entityId":"ID of the entity","_name":"The name assigned to the entity token","_symbol":"The symbol assigned to the entity token"}},"getEntityInfo(bytes32)":{"details":"Get the Entity data for a given entityId","params":{"_entityId":"ID of the entity"},"returns":{"_0":"Entity struct with metadata of the entity"}},"hashTypedDataV4(bytes32)":{"details":"Given an already https://eips.ethereum.org/EIPS/eip-712#definition-of-hashstruct[hashed struct], this function returns the hash of the fully encoded EIP712 message for this domain. This hash can be used together with {ECDSA-recover} to obtain the signer of a message. For example: ```solidity bytes32 digest = _hashTypedDataV4(keccak256(abi.encode(     keccak256(\"Mail(address to,string contents)\"),     mailTo,     keccak256(bytes(mailContents)) ))); address signer = ECDSA.recover(digest, signature); ```"},"isTokenWrapped(bytes32)":{"params":{"_entityId":"ID of the entity"}},"startTokenSale(bytes32,uint256,uint256)":{"details":"Entity tokens are minted when the sale is started","params":{"_amount":"amount of entity tokens to put on sale","_entityId":"ID of the entity","_totalPrice":"total price of the tokens"}},"updateEntity(bytes32,(bytes32,uint256,uint256,uint256,bool))":{"params":{"_entity":"metadata of the entity","_entityId":"ID of the entity"}}},"title":"Entities","version":1},"userdoc":{"kind":"user","methods":{"createSimplePolicy(bytes32,bytes32,(bytes32[],bytes32[],bytes[]),(uint256,uint256,bytes32,uint256,bool,bool,uint256,uint256,bytes32[],uint256[]),bytes32)":{"notice":"Create a Simple Policy"},"enableEntityTokenization(bytes32,string,string)":{"notice":"Enable an entity to be tokenized"},"getEntityInfo(bytes32)":{"notice":"Get the the data for entity with ID: `_entityId`"},"isTokenWrapped(bytes32)":{"notice":"Check if an entity token is wrapped as ERC20"},"startTokenSale(bytes32,uint256,uint256)":{"notice":"Start token sale of `_amount` tokens for total price of `_totalPrice`"},"updateEntity(bytes32,(bytes32,uint256,uint256,uint256,bool))":{"notice":"Update entity metadata"}},"notice":"Used to handle policies and token sales","version":1}},"settings":{"compilationTarget":{"src/diamonds/nayms/interfaces/IEntityFacet.sol":"IEntityFacet"},"evmVersion":"london","libraries":{},"metadata":{"bytecodeHash":"ipfs"},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"src/diamonds/nayms/interfaces/FreeStructs.sol":{"keccak256":"0xa581c3557a40441e49ee21a9cec83622785e9ae70457e3e946660b96884a2260","license":"MIT","urls":["bzz-raw://27c0f2ac1f2a37e653caf1a78d7e15ecb0aa9be191ab8b5544f9f321fdf76973","dweb:/ipfs/QmYCw4JjEhjbFaJ5mCYMntM7B1G7crDxbwaewfhbuGu8Ei"]},"src/diamonds/nayms/interfaces/IEntityFacet.sol":{"keccak256":"0xce32aa04ea48b38030d2b8650d0989b37cde6e48bcbbb133ff8e7e7ffd0f78e4","license":"MIT","urls":["bzz-raw://c970eb23c90a71386c7524abf0faca59dada315598df56826312ef15065556f5","dweb:/ipfs/QmZCxwYYyPQyKgrpR7cqKWSw8aCbDHCYCi4JZUVdkKrQRY"]}},"version":1}