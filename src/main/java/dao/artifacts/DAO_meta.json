{"compiler":{"version":"0.8.17+commit.8df45f5f"},"language":"Solidity","output":{"abi":[{"inputs":[],"stateMutability":"nonpayable","type":"constructor"},{"inputs":[{"internalType":"uint256","name":"index","type":"uint256"}],"name":"ActionFailed","type":"error"},{"inputs":[],"name":"AnyAddressDisallowedForWhoAndWhere","type":"error"},{"inputs":[],"name":"ConditionNotPresentForAnyAddress","type":"error"},{"inputs":[{"internalType":"uint256","name":"expected","type":"uint256"},{"internalType":"uint256","name":"actual","type":"uint256"}],"name":"NativeTokenDepositAmountMismatch","type":"error"},{"inputs":[{"internalType":"address","name":"where","type":"address"},{"internalType":"address","name":"who","type":"address"},{"internalType":"bytes32","name":"permissionId","type":"bytes32"},{"internalType":"address","name":"currentCondition","type":"address"},{"internalType":"address","name":"newCondition","type":"address"}],"name":"PermissionAlreadyGrantedForDifferentCondition","type":"error"},{"inputs":[],"name":"PermissionsForAnyAddressDisallowed","type":"error"},{"inputs":[],"name":"TooManyActions","type":"error"},{"inputs":[{"internalType":"address","name":"where","type":"address"},{"internalType":"address","name":"who","type":"address"},{"internalType":"bytes32","name":"permissionId","type":"bytes32"}],"name":"Unauthorized","type":"error"},{"inputs":[{"internalType":"bytes4","name":"callbackSelector","type":"bytes4"},{"internalType":"bytes4","name":"magicNumber","type":"bytes4"}],"name":"UnkownCallback","type":"error"},{"inputs":[],"name":"ZeroAmount","type":"error"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"previousAdmin","type":"address"},{"indexed":false,"internalType":"address","name":"newAdmin","type":"address"}],"name":"AdminChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"beacon","type":"address"}],"name":"BeaconUpgraded","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"sender","type":"address"},{"indexed":true,"internalType":"bytes4","name":"sig","type":"bytes4"},{"indexed":false,"internalType":"bytes","name":"data","type":"bytes"}],"name":"CallbackReceived","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"sender","type":"address"},{"indexed":true,"internalType":"address","name":"token","type":"address"},{"indexed":false,"internalType":"uint256","name":"amount","type":"uint256"},{"indexed":false,"internalType":"string","name":"_reference","type":"string"}],"name":"Deposited","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"actor","type":"address"},{"indexed":false,"internalType":"bytes32","name":"callId","type":"bytes32"},{"components":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"}],"indexed":false,"internalType":"struct IDAO.Action[]","name":"actions","type":"tuple[]"},{"indexed":false,"internalType":"uint256","name":"failureMap","type":"uint256"},{"indexed":false,"internalType":"bytes[]","name":"execResults","type":"bytes[]"}],"name":"Executed","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"permissionId","type":"bytes32"},{"indexed":true,"internalType":"address","name":"here","type":"address"},{"indexed":false,"internalType":"address","name":"where","type":"address"},{"indexed":true,"internalType":"address","name":"who","type":"address"},{"indexed":false,"internalType":"contract IPermissionCondition","name":"condition","type":"address"}],"name":"Granted","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint8","name":"version","type":"uint8"}],"name":"Initialized","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"bytes","name":"metadata","type":"bytes"}],"name":"MetadataSet","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"sender","type":"address"},{"indexed":false,"internalType":"uint256","name":"amount","type":"uint256"}],"name":"NativeTokenDeposited","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"string","name":"daoURI","type":"string"}],"name":"NewURI","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"permissionId","type":"bytes32"},{"indexed":true,"internalType":"address","name":"here","type":"address"},{"indexed":false,"internalType":"address","name":"where","type":"address"},{"indexed":true,"internalType":"address","name":"who","type":"address"}],"name":"Revoked","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"signatureValidator","type":"address"}],"name":"SignatureValidatorSet","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"bytes4","name":"interfaceId","type":"bytes4"},{"indexed":false,"internalType":"bytes4","name":"callbackSelector","type":"bytes4"},{"indexed":false,"internalType":"bytes4","name":"magicNumber","type":"bytes4"}],"name":"StandardCallbackRegistered","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"forwarder","type":"address"}],"name":"TrustedForwarderSet","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"implementation","type":"address"}],"name":"Upgraded","type":"event"},{"stateMutability":"nonpayable","type":"fallback"},{"inputs":[],"name":"EXECUTE_PERMISSION_ID","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"REGISTER_STANDARD_CALLBACK_PERMISSION_ID","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"ROOT_PERMISSION_ID","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"SET_METADATA_PERMISSION_ID","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"SET_SIGNATURE_VALIDATOR_PERMISSION_ID","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"SET_TRUSTED_FORWARDER_PERMISSION_ID","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"UPGRADE_DAO_PERMISSION_ID","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"components":[{"internalType":"enum PermissionLib.Operation","name":"operation","type":"uint8"},{"internalType":"address","name":"where","type":"address"},{"internalType":"address","name":"who","type":"address"},{"internalType":"address","name":"condition","type":"address"},{"internalType":"bytes32","name":"permissionId","type":"bytes32"}],"internalType":"struct PermissionLib.MultiTargetPermission[]","name":"_items","type":"tuple[]"}],"name":"applyMultiTargetPermissions","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_where","type":"address"},{"components":[{"internalType":"enum PermissionLib.Operation","name":"operation","type":"uint8"},{"internalType":"address","name":"who","type":"address"},{"internalType":"bytes32","name":"permissionId","type":"bytes32"}],"internalType":"struct PermissionLib.SingleTargetPermission[]","name":"items","type":"tuple[]"}],"name":"applySingleTargetPermissions","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"daoURI","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_token","type":"address"},{"internalType":"uint256","name":"_amount","type":"uint256"},{"internalType":"string","name":"_reference","type":"string"}],"name":"deposit","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"_callId","type":"bytes32"},{"components":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"}],"internalType":"struct IDAO.Action[]","name":"_actions","type":"tuple[]"},{"internalType":"uint256","name":"_allowFailureMap","type":"uint256"}],"name":"execute","outputs":[{"internalType":"bytes[]","name":"execResults","type":"bytes[]"},{"internalType":"uint256","name":"failureMap","type":"uint256"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"getTrustedForwarder","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_where","type":"address"},{"internalType":"address","name":"_who","type":"address"},{"internalType":"bytes32","name":"_permissionId","type":"bytes32"}],"name":"grant","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_where","type":"address"},{"internalType":"address","name":"_who","type":"address"},{"internalType":"bytes32","name":"_permissionId","type":"bytes32"},{"internalType":"contract IPermissionCondition","name":"_condition","type":"address"}],"name":"grantWithCondition","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_where","type":"address"},{"internalType":"address","name":"_who","type":"address"},{"internalType":"bytes32","name":"_permissionId","type":"bytes32"},{"internalType":"bytes","name":"_data","type":"bytes"}],"name":"hasPermission","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes","name":"_metadata","type":"bytes"},{"internalType":"address","name":"_initialOwner","type":"address"},{"internalType":"address","name":"_trustedForwarder","type":"address"},{"internalType":"string","name":"daoURI_","type":"string"}],"name":"initialize","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_where","type":"address"},{"internalType":"address","name":"_who","type":"address"},{"internalType":"bytes32","name":"_permissionId","type":"bytes32"},{"internalType":"bytes","name":"_data","type":"bytes"}],"name":"isGranted","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"_hash","type":"bytes32"},{"internalType":"bytes","name":"_signature","type":"bytes"}],"name":"isValidSignature","outputs":[{"internalType":"bytes4","name":"","type":"bytes4"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"proxiableUUID","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes4","name":"_interfaceId","type":"bytes4"},{"internalType":"bytes4","name":"_callbackSelector","type":"bytes4"},{"internalType":"bytes4","name":"_magicNumber","type":"bytes4"}],"name":"registerStandardCallback","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_where","type":"address"},{"internalType":"address","name":"_who","type":"address"},{"internalType":"bytes32","name":"_permissionId","type":"bytes32"}],"name":"revoke","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"string","name":"newDaoURI","type":"string"}],"name":"setDaoURI","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes","name":"_metadata","type":"bytes"}],"name":"setMetadata","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_signatureValidator","type":"address"}],"name":"setSignatureValidator","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_newTrustedForwarder","type":"address"}],"name":"setTrustedForwarder","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"signatureValidator","outputs":[{"internalType":"contract IERC1271","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"newImplementation","type":"address"}],"name":"upgradeTo","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"newImplementation","type":"address"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"upgradeToAndCall","outputs":[],"stateMutability":"payable","type":"function"},{"stateMutability":"payable","type":"receive"}],"devdoc":{"author":"Aragon Association - 2021-2023","details":"Public API of the Aragon DAO framework.","errors":{"ActionFailed(uint256)":[{"params":{"index":"The index of the action in the action array that failed."}}],"NativeTokenDepositAmountMismatch(uint256,uint256)":[{"params":{"actual":"The actual native token amount deposited.","expected":"The expected native token amount."}}],"PermissionAlreadyGrantedForDifferentCondition(address,address,bytes32,address,address)":[{"details":"This makes sure that condition on the same permission can not be overwriten by a different condition.","params":{"currentCondition":"The current condition set for permissionId.","newCondition":"The new condition it tries to set for permissionId.","permissionId":"The permission identifier.","where":"The address of the target contract to grant `_who` permission to.","who":"The address (EOA or contract) to which the permission has already been granted."}}],"Unauthorized(address,address,bytes32)":[{"params":{"permissionId":"The permission identifier.","where":"The context in which the authorization reverted.","who":"The address (EOA or contract) missing the permission."}}],"UnkownCallback(bytes4,bytes4)":[{"params":{"callbackSelector":"The selector of the callback function.","magicNumber":"The magic number to be registered for the callback function selector."}}]},"events":{"NewURI(string)":{"params":{"daoURI":"The new uri."}}},"kind":"dev","methods":{"applyMultiTargetPermissions((uint8,address,address,address,bytes32)[])":{"params":{"_items":"The array of multi-targeted permission operations to apply."}},"applySingleTargetPermissions(address,(uint8,address,bytes32)[])":{"params":{"_where":"The address of the single target contract.","items":"The array of single-targeted permission operations to apply."}},"deposit(address,uint256,string)":{"params":{"_amount":"The amount of tokens to deposit.","_reference":"The reference describing the deposit reason.","_token":"The address of the token or address(0) in case of the native token."}},"execute(bytes32,(address,uint256,bytes)[],uint256)":{"params":{"_actions":"The array of actions.","_allowFailureMap":"A bitmap allowing execution to succeed, even if individual actions might revert. If the bit at index `i` is 1, the execution succeeds even if the `i`th action reverts. A failure map value of 0 requires every action to not revert.","_callId":"The ID of the call. The definition of the value of `callId` is up to the calling contract and can be used, e.g., as a nonce."},"returns":{"execResults":"The array of results obtained from the executed actions in `bytes`.","failureMap":"The constructed failureMap which contains which actions have actually failed."}},"getTrustedForwarder()":{"returns":{"_0":"The trusted forwarder address."}},"grant(address,address,bytes32)":{"details":"Requires the `ROOT_PERMISSION_ID` permission.Note, that granting permissions with `_who` or `_where` equal to `ANY_ADDR` does not replace other permissions with specific `_who` and `_where` addresses that exist in parallel.","params":{"_permissionId":"The permission identifier.","_where":"The address of the target contract for which `_who` recieves permission.","_who":"The address (EOA or contract) receiving the permission."}},"grantWithCondition(address,address,bytes32,address)":{"details":"Requires the `ROOT_PERMISSION_ID` permissionNote, that granting permissions with `_who` or `_where` equal to `ANY_ADDR` does not replace other permissions with specific `_who` and `_where` addresses that exist in parallel.","params":{"_condition":"The `PermissionCondition` that will be asked for authorization on calls connected to the specified permission identifier.","_permissionId":"The permission identifier.","_where":"The address of the target contract for which `_who` recieves permission.","_who":"The address (EOA or contract) receiving the permission."}},"hasPermission(address,address,bytes32,bytes)":{"params":{"_data":"The optional data passed to the `PermissionCondition` registered.","_permissionId":"The permission identifier.","_where":"The address of the contract.","_who":"The address of a EOA or contract to give the permissions."},"returns":{"_0":"Returns true if the address has permission, false if not."}},"initialize(bytes,address,address,string)":{"details":"This method is required to support [ERC-1822](https://eips.ethereum.org/EIPS/eip-1822).","params":{"_initialOwner":"The initial owner of the DAO having the `ROOT_PERMISSION_ID` permission.","_metadata":"IPFS hash that points to all the metadata (logo, description, tags, etc.) of a DAO.","_trustedForwarder":"The trusted forwarder responsible for verifying meta transactions."}},"isGranted(address,address,bytes32,bytes)":{"params":{"_data":"The optional data passed to the `PermissionCondition` registered.","_permissionId":"The permission identifier.","_where":"The address of the target contract for which `_who` recieves permission.","_who":"The address (EOA or contract) for which the permission is checked."},"returns":{"_0":"Returns true if `_who` has the permissions on the target contract via the specified permission identifier."}},"isValidSignature(bytes32,bytes)":{"params":{"_hash":"The hash of the data to be signed.","_signature":"The signature byte array associated with `_hash`."},"returns":{"_0":"Returns the `bytes4` magic value `0x1626ba7e` if the signature is valid."}},"proxiableUUID()":{"details":"Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate the implementation's compatibility when performing an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier."},"registerStandardCallback(bytes4,bytes4,bytes4)":{"params":{"_callbackSelector":"The selector of the callback function.","_interfaceId":"The ID of the interface.","_magicNumber":"The magic number to be registered for the function signature."}},"revoke(address,address,bytes32)":{"details":"Requires the `ROOT_PERMISSION_ID` permission.Note, that revoking permissions with `_who` or `_where` equal to `ANY_ADDR` does not revoke other permissions with specific `_who` and `_where` addresses that exist in parallel.","params":{"_permissionId":"The permission identifier.","_where":"The address of the target contract for which `_who` loses permission.","_who":"The address (EOA or contract) losing the permission."}},"setDaoURI(string)":{"params":{"newDaoURI":"The new DAO uri to be set."}},"setMetadata(bytes)":{"params":{"_metadata":"The IPFS hash of the new metadata object."}},"setSignatureValidator(address)":{"params":{"_signatureValidator":"The address of the signature validator."}},"setTrustedForwarder(address)":{"params":{"_trustedForwarder":"The trusted forwarder address."}},"supportsInterface(bytes4)":{"details":"See {IERC165-supportsInterface}."},"upgradeTo(address)":{"details":"Upgrade the implementation of the proxy to `newImplementation`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."},"upgradeToAndCall(address,bytes)":{"details":"Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."}},"title":"DAO","version":1},"userdoc":{"errors":{"ActionFailed(uint256)":[{"notice":"Thrown if action execution has failed."}],"AnyAddressDisallowedForWhoAndWhere()":[{"notice":"Thrown for permission grants where `who` and `where` are both `ANY_ADDR`."}],"ConditionNotPresentForAnyAddress()":[{"notice":"Thrown for permission grants where `who` or `where` is `ANY_ADDR`, but no condition is present."}],"NativeTokenDepositAmountMismatch(uint256,uint256)":[{"notice":"Thrown if there is a mismatch between the expected and actually deposited amount of native tokens."}],"PermissionAlreadyGrantedForDifferentCondition(address,address,bytes32,address,address)":[{"notice":"Thrown if a permission has been already granted with a different condition."}],"PermissionsForAnyAddressDisallowed()":[{"notice":"Thrown for `ROOT_PERMISSION_ID` or `EXECUTE_PERMISSION_ID` permission grants where `who` or `where` is `ANY_ADDR`."}],"TooManyActions()":[{"notice":"Thrown if the action array length is larger than `MAX_ACTIONS`."}],"Unauthorized(address,address,bytes32)":[{"notice":"Thrown if a call is unauthorized."}],"UnkownCallback(bytes4,bytes4)":[{"notice":"Thrown if the callback function is not registered."}],"ZeroAmount()":[{"notice":"Thrown if the deposit amount is zero."}]},"events":{"CallbackReceived(address,bytes4,bytes)":{"notice":"Emitted when `_handleCallback` is called."},"Deposited(address,address,uint256,string)":{"notice":"Emitted when a token deposit has been made to the DAO."},"Executed(address,bytes32,(address,uint256,bytes)[],uint256,bytes[])":{"notice":"Emitted when a proposal is executed."},"Granted(bytes32,address,address,address,address)":{"notice":"Emitted when a permission `permission` is granted in the context `here` to the address `_who` for the contract `_where`."},"MetadataSet(bytes)":{"notice":"Emitted when the DAO metadata is updated."},"NativeTokenDeposited(address,uint256)":{"notice":"Emitted when a native token deposit has been made to the DAO."},"NewURI(string)":{"notice":"Emitted when a new DAO uri is set."},"Revoked(bytes32,address,address,address)":{"notice":"Emitted when a permission `permission` is revoked in the context `here` from the address `_who` for the contract `_where`."},"SignatureValidatorSet(address)":{"notice":"Emitted when the signature validator address is updated."},"StandardCallbackRegistered(bytes4,bytes4,bytes4)":{"notice":"Emitted when a standard callback is registered."},"TrustedForwarderSet(address)":{"notice":"Emitted when a new TrustedForwarder is set on the DAO."}},"kind":"user","methods":{"EXECUTE_PERMISSION_ID()":{"notice":"The ID of the permission required to call the `execute` function."},"REGISTER_STANDARD_CALLBACK_PERMISSION_ID()":{"notice":"The ID of the permission required to call the `registerStandardCallback` function."},"ROOT_PERMISSION_ID()":{"notice":"The ID of the permission required to call the `grant`, `grantWithCondition`, `revoke`, and `bulk` function."},"SET_METADATA_PERMISSION_ID()":{"notice":"The ID of the permission required to call the `setMetadata` function."},"SET_SIGNATURE_VALIDATOR_PERMISSION_ID()":{"notice":"The ID of the permission required to call the `setSignatureValidator` function."},"SET_TRUSTED_FORWARDER_PERMISSION_ID()":{"notice":"The ID of the permission required to call the `setTrustedForwarder` function."},"UPGRADE_DAO_PERMISSION_ID()":{"notice":"The ID of the permission required to call the `_authorizeUpgrade` function."},"applyMultiTargetPermissions((uint8,address,address,address,bytes32)[])":{"notice":"Applies an array of permission operations on multiple target contracts `items[i].where`."},"applySingleTargetPermissions(address,(uint8,address,bytes32)[])":{"notice":"Applies an array of permission operations on a single target contracts `_where`."},"constructor":{"notice":"Disables the initializers on the implementation contract to prevent it from being left uninitialized."},"daoURI()":{"notice":"A distinct Uniform Resource Identifier (URI) pointing to a JSON object following the \"EIP-4824 DAO JSON-LD Schema\". This JSON file splits into four URIs: membersURI, proposalsURI, activityLogURI, and governanceURI. The membersURI should point to a JSON file that conforms to the \"EIP-4824 Members JSON-LD Schema\". The proposalsURI should point to a JSON file that conforms to the \"EIP-4824 Proposals JSON-LD Schema\". The activityLogURI should point to a JSON file that conforms to the \"EIP-4824 Activity Log JSON-LD Schema\". The governanceURI should point to a flatfile, normatively a .md file. Each of the JSON files named above can be statically-hosted or dynamically-generated."},"deposit(address,uint256,string)":{"notice":"Deposits (native) tokens to the DAO contract with a reference string."},"execute(bytes32,(address,uint256,bytes)[],uint256)":{"notice":"Executes a list of actions. If no failure map is provided, one failing action results in the entire excution to be reverted. If a non-zero failure map is provided, allowed actions can fail without the remaining actions being reverted."},"getTrustedForwarder()":{"notice":"Getter for the trusted forwarder verifying the meta transaction."},"grant(address,address,bytes32)":{"notice":"Grants permission to an address to call methods in a contract guarded by an auth modifier with the specified permission identifier."},"grantWithCondition(address,address,bytes32,address)":{"notice":"Grants permission to an address to call methods in a target contract guarded by an auth modifier with the specified permission identifier if the referenced condition permits it."},"hasPermission(address,address,bytes32,bytes)":{"notice":"Checks if an address has permission on a contract via a permission identifier and considers if `ANY_ADDRESS` was used in the granting process."},"initialize(bytes,address,address,string)":{"notice":"Initializes the DAO by - registering the [ERC-165](https://eips.ethereum.org/EIPS/eip-165) interface ID - setting the trusted forwarder for meta transactions - giving the `ROOT_PERMISSION_ID` permission to the initial owner (that should be revoked and transferred to the DAO after setup)."},"isGranted(address,address,bytes32,bytes)":{"notice":"Checks if an address has permission on a contract via a permission identifier and considers if `ANY_ADDRESS` was used in the granting process."},"isValidSignature(bytes32,bytes)":{"notice":"Checks whether a signature is valid for the provided hash by forwarding the call to the set [ERC-1271](https://eips.ethereum.org/EIPS/eip-1271) signature validator contract."},"registerStandardCallback(bytes4,bytes4,bytes4)":{"notice":"Registers an ERC standard having a callback by registering its [ERC-165](https://eips.ethereum.org/EIPS/eip-165) interface ID and callback function signature."},"revoke(address,address,bytes32)":{"notice":"Revokes permission from an address to call methods in a target contract guarded by an auth modifier with the specified permission identifier."},"setDaoURI(string)":{"notice":"Updates the set DAO uri to a new value."},"setMetadata(bytes)":{"notice":"Updates the DAO metadata (e.g., an IPFS hash)."},"setSignatureValidator(address)":{"notice":"Setter for the [ERC-1271](https://eips.ethereum.org/EIPS/eip-1271) signature validator contract."},"setTrustedForwarder(address)":{"notice":"Setter for the trusted forwarder verifying the meta transaction."},"signatureValidator()":{"notice":"The [ERC-1271](https://eips.ethereum.org/EIPS/eip-1271) signature validator contract."}},"notice":"This contract is the entry point to the Aragon DAO framework and provides our users a simple and easy to use public interface.","version":1}},"settings":{"compilationTarget":{"src/core/dao/DAO.sol":"DAO"},"evmVersion":"london","libraries":{},"metadata":{"bytecodeHash":"ipfs"},"optimizer":{"enabled":false,"runs":200},"remappings":[]},"sources":{"@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol":{"keccak256":"0x77c89f893e403efc6929ba842b7ccf6534d4ffe03afe31670b4a528c0ad78c0f","license":"MIT","urls":["bzz-raw://496bd9b3df2455d571018c09f0c6badd29713fdeb907c6aa09d8d28cb603f053","dweb:/ipfs/QmXdJDyYs6WMwMh21dez2BYPxhSUaUYFMDtVNcn2cgFR79"]},"@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol":{"keccak256":"0x315887e846f1e5f8d8fa535a229d318bb9290aaa69485117f1ee8a9a6b3be823","license":"MIT","urls":["bzz-raw://29dda00da6d269685b555e710e4abf1c3eb6d00c15b888a7880a2f8dd3c4fdc2","dweb:/ipfs/QmSqcjtdECygtT1Gy7uEo42x8542srpgGEeKKHfcnQqXgn"]},"@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol":{"keccak256":"0x24b86ac8c005b8c654fbf6ac34a5a4f61580d7273541e83e013e89d66fbf0908","license":"MIT","urls":["bzz-raw://4dbfe1a3b3b3fb64294ce41fd2ad362e7b7012208117864f42c1a67620a6d5c1","dweb:/ipfs/QmVMU5tWt7zBQMmf5cpMX8UMHV86T3kFeTxBTBjFqVWfoJ"]},"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol":{"keccak256":"0x037c334add4b033ad3493038c25be1682d78c00992e1acb0e2795caff3925271","license":"MIT","urls":["bzz-raw://8a313cf42389440e2706837c91370323b85971c06afd6d056d21e2bc86459618","dweb:/ipfs/QmT8XUrUvQ9aZaPKrqgRU2JVGWnaxBcUYJA7Q7K5KcLBSZ"]},"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol":{"keccak256":"0x7967d130887c4b40666cd88f8744691d4527039a1b2a38aa0de41481ef646778","license":"MIT","urls":["bzz-raw://40e60cbf0e2efede4d9c169e66336a64615af7b719a896ef1f37ae8cd4614ec1","dweb:/ipfs/QmYNiwY22ifhfa8yK6mLCEKfj39caYUHLqe2VBtzDnvdsV"]},"@openzeppelin/contracts-upgradeable/token/ERC1155/IERC1155ReceiverUpgradeable.sol":{"keccak256":"0xffcb29612efb57efc8f0d4897deb5abaeac830022c59a3aa17446d698dbc856b","license":"MIT","urls":["bzz-raw://4a4da6e241d1d8c2ef214c311e02c749f45b5e0dd8168c667bc8ee6f67dcf4ce","dweb:/ipfs/QmdsKj5frsNS7ZCfJBm4XNfy6MueV9udBF2FiBxVXwxybG"]},"@openzeppelin/contracts-upgradeable/token/ERC1155/IERC1155Upgradeable.sol":{"keccak256":"0x091a49ef99a2be002680781a10cc9dd74c0f348301ede5482c4ea625f79a8ffe","license":"MIT","urls":["bzz-raw://e037192cadfd20ad0f1b0c54a0c770a1ba551e7d0fcb6d3708e5ba352f88ded2","dweb:/ipfs/QmTXwY6odV1ToDZAYxbbLKThe9M5PUWTmWBjwT776hH4qm"]},"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol":{"keccak256":"0x4e733d3164f73f461eaf9d8087a7ad1ea180bdc8ba0d3d61b0e1ae16d8e63dff","license":"MIT","urls":["bzz-raw://75b47c3aeca7b66ea6752f8be020ec5c1c502de6ec9065272dae23d3a52196e2","dweb:/ipfs/QmUebPMHv16tYKFh5BmBQkMfRFb5b8UZ2RgVwdjxCeufVF"]},"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-IERC20PermitUpgradeable.sol":{"keccak256":"0xcc70d8e2281fb3ff69e8ab242500f10142cd0a7fa8dd9e45882be270d4d09024","license":"MIT","urls":["bzz-raw://17a4063bc918df0f7bb9cbf04c6f0bb4977afab3f2fc212bc138a178312a221d","dweb:/ipfs/QmZMdvsHP5mDEAAdrK4bNeNh47TfmSFgN9qEBFTbie7zmm"]},"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol":{"keccak256":"0x220c4a5af915e656be2aaa85ca57505d102418e476b1e2ef6c62e0c6ac143871","license":"MIT","urls":["bzz-raw://6ed2c33173f7e7000889abed7c339b7a0e3b7867cdea546caaf6bc917ef1039c","dweb:/ipfs/QmQ4Ye5h7jm6V4CdhT3r6hvf25DtiV74ErppQVE4SpRKj6"]},"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721ReceiverUpgradeable.sol":{"keccak256":"0xbb2ed8106d94aeae6858e2551a1e7174df73994b77b13ebd120ccaaef80155f5","license":"MIT","urls":["bzz-raw://8bc3c6a456dba727d8dd9fd33420febede490abb49a07469f61d2a3ace66a95a","dweb:/ipfs/QmVAWtEVj7K5AbvgJa9Dz22KiDq9eoptCjnVZqsTMtKXyd"]},"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol":{"keccak256":"0x2edcb41c121abc510932e8d83ff8b82cf9cdde35e7c297622f5c29ef0af25183","license":"MIT","urls":["bzz-raw://72460c66cd1c3b1c11b863e0d8df0a1c56f37743019e468dc312c754f43e3b06","dweb:/ipfs/QmPExYKiNb9PUsgktQBupPaM33kzDHxaYoVeJdLhv8s879"]},"@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol":{"keccak256":"0x09864aea84f01e39313375b5610c73a3c1c68abbdc51e5ccdd25ff977fdadf9a","license":"MIT","urls":["bzz-raw://aedb48081190fa828d243529ce25c708202c7d4ccfe99f0e4ecd6bc0cfcd03f3","dweb:/ipfs/QmWyiDQHPZA56iqsAwTmiJoxvNeRQLUVr4gTfzpdpXivpo"]},"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165StorageUpgradeable.sol":{"keccak256":"0x8abf30b22b9f34c48c1101400a3172483cfa4fdc5e4de6d040309463e6faee4a","license":"MIT","urls":["bzz-raw://5b8ea6bb70c57d00605104de256ca41f224243d6d3e15857955540c1ae5603f4","dweb:/ipfs/Qmd2ho9bNaXeJSXQeN5xABYdHz83noBnejHWesbwjA4Bfb"]},"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol":{"keccak256":"0x9a3b990bd56d139df3e454a9edf1c64668530b5a77fc32eb063bc206f958274a","license":"MIT","urls":["bzz-raw://0895399d170daab2d69b4c43a0202e5a07f2e67a93b26e3354dcbedb062232f7","dweb:/ipfs/QmUM1VH3XDk559Dsgh4QPvupr3YVKjz87HrSyYzzVFZbxw"]},"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol":{"keccak256":"0xc6cef87559d0aeffdf0a99803de655938a7779ec0a3cd5d4383483ad85565a09","license":"MIT","urls":["bzz-raw://92ad7e572cf44e6b4b37631b44b62f9eb9fb1cf14d9ce51c1504d5dc7ccaf758","dweb:/ipfs/QmcnbqX85tsWnUXPmtuPLE4SczME2sJaTfmqEFkuAJvWhy"]},"@openzeppelin/contracts/interfaces/IERC1271.sol":{"keccak256":"0x0705a4b1b86d7b0bd8432118f226ba139c44b9dcaba0a6eafba2dd7d0639c544","license":"MIT","urls":["bzz-raw://c45b821ef9e882e57c256697a152e108f0f2ad6997609af8904cae99c9bd422e","dweb:/ipfs/QmRKCJW6jjzR5UYZcLpGnhEJ75UVbH6EHkEa49sWx2SKng"]},"src/core/dao/DAO.sol":{"keccak256":"0xfbea3c8e179de71ce33fa34b0120da5a768952ceb3b9ceffacb9ef57cd5ea8fa","license":"AGPL-3.0-or-later","urls":["bzz-raw://d9cdd8972e9c298c4b4f1af5fdd34ede58563c83a6fcf12390af02807e17c311","dweb:/ipfs/QmVqJmc5xs3WdiRWndJ89dhRQ7kjYeuN5fXAqUzY46dCzH"]},"src/core/dao/IDAO.sol":{"keccak256":"0xbbae6e5094e79ca06bce2c3aa55b01001d0681ab00944c16bfc431df4c9348ae","license":"AGPL-3.0-or-later","urls":["bzz-raw://2ce9b22dde0ceef9dc0def0cc32ae72f2d2e2da0362b0a803b088f1b48f0e109","dweb:/ipfs/QmbKSboLC7djZdGZjbqwgcZQoWnBJDTUe6NAogwycBmzhw"]},"src/core/dao/IEIP4824.sol":{"keccak256":"0x98086083fd347aa128d8fcf85fc259f1bc7be7a4ab028183fe6ae6f4b7ba4159","license":"AGPL-3.0-or-later","urls":["bzz-raw://026c86b6e119f2df305db01cc3f40d54ac6f23b0a75a48273bc9131c9a6b1262","dweb:/ipfs/Qmf8EYwPmPYgQxtChUYKd1NT957iraJUVBsrFFFFzM22FZ"]},"src/core/permission/IPermissionCondition.sol":{"keccak256":"0x38e4f91e06bb2255dae9c2305c05e511fddf773cf231be42aedee5e883255bb9","license":"AGPL-3.0-or-later","urls":["bzz-raw://efa89b045dc87ff9c14ccf32de35a9d64d97cf3fb05c997ca31d672f56e74354","dweb:/ipfs/QmRpD4XneUUfZzRPW6sgT66614cCV9rLU5aDa3AiDiyEnd"]},"src/core/permission/PermissionLib.sol":{"keccak256":"0xd1a00691deee7a95f44a7ea8bda5494a71ae2662d056315dbe260aadc4025cb6","license":"AGPL-3.0-or-later","urls":["bzz-raw://fcb8b541e35540383fb0362aedc7ebe7297d64133f3b72a15100464ad29b8f41","dweb:/ipfs/QmT4gj4Hf1apwCpfaHCxByRnNMYhc6gsGqNaETEHyAXfer"]},"src/core/permission/PermissionManager.sol":{"keccak256":"0xc695525c206e8b54d0314a1a707f94655d4684ba0f0f4ae04ffdb9a9f641f643","license":"AGPL-3.0-or-later","urls":["bzz-raw://5117959bd4c832fcd2f6b7d3697a2802f2dce3caef2250fe7433d270f99f2c2d","dweb:/ipfs/QmZsNkBSsGBY1Xrpck13QpLZ7JVYaa8Q6rSXnt1PPE11gL"]},"src/core/utils/BitMap.sol":{"keccak256":"0x3c7ba0b2d818fe0cce90199f1e9b6ebb8c7f7cd836c68b882d9465fb57c06e2d","license":"AGPL-3.0-or-later","urls":["bzz-raw://48aa9200b99fa4876fb12f9fdb8dc6a133be4e32b6c17cdc795c5951bb4b5fb0","dweb:/ipfs/QmTa4Arnf5P8Hs2bXD5avwARV94e2ww2UAF9xoLW2Ue24N"]},"src/core/utils/CallbackHandler.sol":{"keccak256":"0x1322af2c404353ca0e02384a3e28d272013da4e57d3ff34ce510d47207a33ab8","license":"AGPL-3.0-or-later","urls":["bzz-raw://d4c2e966f8ad50f11bb045df443ba8eff46076d9c79b37c1490c4849da5a0c85","dweb:/ipfs/QmVU1VMXBTNVz99nmAL11A5i9DEKcVcMrHGVw5BeZkSeTG"]}},"version":1}